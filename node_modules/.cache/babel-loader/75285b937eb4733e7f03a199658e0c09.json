{"ast":null,"code":"import _regeneratorRuntime from \"/Users/leocolabrese/bet3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/leocolabrese/bet3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers, Contract } from 'ethers';\nimport makeBet from './makeBet.json';\n\nvar getBlockchain = function getBlockchain() {\n  return new Promise( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var provider, networkId, signer, MakeBet;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return detectEthereumProvider();\n\n            case 2:\n              provider = _context.sent;\n\n              if (!provider) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 6;\n              return provider.request({\n                method: 'eth_requestAccounts'\n              });\n\n            case 6:\n              _context.next = 8;\n              return provider.request({\n                method: 'net_version'\n              });\n\n            case 8:\n              networkId = _context.sent;\n              provider = new ethers.providers.Web3Provider(provider);\n              signer = provider.getSigner();\n              MakeBet = new Contract(makeBet.networks[networkId].address, makeBet.abi, signer);\n              resolve({\n                MakeBet: MakeBet\n              });\n              return _context.abrupt(\"return\");\n\n            case 14:\n              reject('Install Metamask');\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nexport default getBlockchain;","map":{"version":3,"sources":["/Users/leocolabrese/bet3/src/ethereum.js"],"names":["detectEthereumProvider","ethers","Contract","makeBet","getBlockchain","Promise","resolve","reject","provider","request","method","networkId","providers","Web3Provider","signer","getSigner","MakeBet","networks","address","abi"],"mappings":";;AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SACpB,IAAIC,OAAJ;AAAA,wEAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACUP,sBAAsB,EADhC;;AAAA;AACPQ,cAAAA,QADO;;AAAA,mBAERA,QAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGHA,QAAQ,CAACC,OAAT,CAAiB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAjB,CAHG;;AAAA;AAAA;AAAA,qBAIeF,QAAQ,CAACC,OAAT,CAAiB;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAAjB,CAJf;;AAAA;AAIHC,cAAAA,SAJG;AAKTH,cAAAA,QAAQ,GAAG,IAAIP,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAX;AACMM,cAAAA,MANG,GAMMN,QAAQ,CAACO,SAAT,EANN;AAOHC,cAAAA,OAPG,GAOO,IAAId,QAAJ,CACdC,OAAO,CAACc,QAAR,CAAiBN,SAAjB,EAA4BO,OADd,EAEdf,OAAO,CAACgB,GAFM,EAGdL,MAHc,CAPP;AAYTR,cAAAA,OAAO,CAAC;AAACU,gBAAAA,OAAO,EAAPA;AAAD,eAAD,CAAP;AAZS;;AAAA;AAeXT,cAAAA,MAAM,CAAC,kBAAD,CAAN;;AAfW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,MADoB;AAAA,CAAtB;;AAmBA,eAAeH,aAAf","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers, Contract } from 'ethers';\nimport makeBet from './makeBet.json';\n\nconst getBlockchain = () =>\n  new Promise( async (resolve, reject) => {\n    let provider = await detectEthereumProvider();\n    if(provider) {\n      await provider.request({ method: 'eth_requestAccounts' });\n      const networkId = await provider.request({ method: 'net_version' })\n      provider = new ethers.providers.Web3Provider(provider);\n      const signer = provider.getSigner();\n      const MakeBet = new Contract(\n        makeBet.networks[networkId].address,\n        makeBet.abi,\n        signer\n      );\n      resolve({MakeBet});\n      return;\n    }\n    reject('Install Metamask');\n  });\n\nexport default getBlockchain;"]},"metadata":{},"sourceType":"module"}